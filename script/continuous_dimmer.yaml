blueprint:
  name: Continuous dimmer
  description: Dim a light continuously
  domain: script
  input:
    light_entity:
      name: Light
      description: Selected device
      selector:
        entity:
          filter:
            domain: light
    exponent:
      name: Dimming curve value
      description: Exponent of the dimming curve (1 = linear)
      default: 1
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
          unit_of_measurement: ""
          mode: box
    minimum_value:
      name: Minimum dimming value
      description: When reaching this dimming value the script will be stopped
      default: 0
      selector:
        number:
          min: 0
          max: 254
          step: 1
          unit_of_measurement: ""
          mode: box
    maximum_value:
      name: Maximum dimming value
      description: When reaching this dimming value the script will be stopped
      default: 254
      selector:
        number:
          min: 0
          max: 254
          step: 1
          unit_of_measurement: ""
          mode: box
    step_duration:
      name: Step duration
      description: Time each step takes
      default: 0.25
      selector:
        number:
          min: 0.1
          max: 10
          step: 0.1
          unit_of_measurement: "s"
          mode: box
    transition_time:
      name: Transition time
      description: Time each step takes to transition
      default: 0
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
          unit_of_measurement: "s"
          mode: box

variables:
  light_entity: !input light_entity
  exponent: !input exponent
  minimum_value: !input minimum_value
  maximum_value: !input maximum_value
  step_duration: !input step_duration
  step_value: "{{ speed * 254 * step_duration / 100 }}"
  initial_brightness: "{{ 254 * (state_attr(light_entity, 'brightness') / 254) ** (1 / exponent) }}"

mode: restart
sequence:
  - condition: state
    entity_id: !input light_entity
    state: "on"
  - if:
      - condition: template
        value_template: "{{ speed != 0 }}"
    then:
      - repeat:
          sequence:
            - action: light.turn_on
              metadata: {}
              data:
                transition: !input transition_time
                brightness: "{{ min([maximum_value, max([minimum_value, 254 * ((initial_brightness + repeat.index * step_value) / 254) ** exponent])]) }}"
              target:
                entity_id: !input light_entity
            - delay: !input step_duration
          until:
            - condition: or
              conditions:
                - condition: template
                  value_template: "{{ not minimum_value < 254 * ((initial_brightness + repeat.index * step_value) / 254) ** exponent < maximum_value }}"
                - condition: state
                  entity_id: !input light_entity
                  state: "off"
  - action: mqtt.publish
    metadata: {}
    data:
      topic: zigbee2mqtt/{{ states[light_entity].object_id }}/set
      payload: "{\"brightness_move\": 0}"
      retain: false

fields:
  speed:
    selector:
      number:
        min: -100
        max: 100
        step: 1
        unit_of_measurement: "%/s"
        mode: slider
    required: true
    default: 0
    name: Speed
